import cv2
import random
import pytesseract
import easyocr

# Create an OCR reader using the default language (English)
reader = easyocr.Reader(['en'])

# Read an image
image_path = 'sample.jpeg'

# Perform OCR
result = reader.readtext(image_path)

# Print the extracted text
for detection in result:
    text = detection[1]
    print(f"Detected Text: {text}")


# Load an image from file
image = cv2.imread('sample.jpeg')

# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise and improve contour detection
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

text = pytesseract.image_to_string(gray_image)

# Print the extracted text
print("Extracted Text:")
print(text)

# Perform edge detection using the Canny edge detector
edges = cv2.Canny(blurred_image, 50, 150)

# Find contours in the edges image
contours, hierarchies = cv2.findContours(edges, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)

# Filter contours based on their area or other criteria
rectangles = []
colors = []
for i, contour in enumerate(contours):
    hierarchy = hierarchies[0][i]
    #print(hierarchy[-1])

    # Approximate the contour to a polygon
    epsilon = 0.04 * cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, epsilon, True)

    # Check if the polygon has four vertices (a rectangle)
    if len(approx) ==4 and hierarchy[-1] != -1:
        rectangles.append(approx)
        colors.append([random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)])

# Draw the rectangles on the original image
for rectangle in rectangles:
    color = colors.pop(0)
    cv2.drawContours(image, [rectangle], -1, (color[0], color[1], color[2]), 2)

# Display the result
cv2.imshow('Rectangles Detected', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
